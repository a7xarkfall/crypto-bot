from fastapi import FastAPI, Request
from telegram import Bot, InputFile
import os

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ (—Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
API_TOKEN = "8162219271:AAEhKmeNRLzORbDwXyLKH4tbUMMmtU-ypsw"
FILE_PATH = "example.txt"
LOG_FILE = "paid_users.txt"
EXPECTED_PAYLOAD = "IVHvWARX9rfE"  # –∏–∑ —Å—Å—ã–ª–∫–∏ CryptoBot

bot = Bot(token=API_TOKEN)
app = FastAPI()

def user_already_received(user_id):
    if not os.path.exists(LOG_FILE):
        return False
    with open(LOG_FILE, 'r') as f:
        return str(user_id) in f.read()

def log_user(user_id):
    with open(LOG_FILE, 'a') as f:
        f.write(f"{user_id}\n")

@app.post("/crypto-webhook")
async def crypto_webhook(request: Request):
    data = await request.json()
    print("üî• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç CryptoBot:", data)

    if data.get("event") == "payment" and data.get("status") == "success":
        payload = data.get("invoice_payload")
        telegram_id = data.get("user", {}).get("telegram_id")

        if payload == EXPECTED_PAYLOAD and telegram_id:
            if user_already_received(telegram_id):
                await bot.send_message(chat_id=telegram_id, text="üìÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Ñ–∞–π–ª. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
            else:
                if os.path.exists(FILE_PATH):
                    await bot.send_document(chat_id=telegram_id, document=InputFile(FILE_PATH),
                                            caption="üìÑ –í–∞—à —Ñ–∞–π–ª ‚Äî —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")

                    gif_path = "success.gif"
                    if os.path.exists(gif_path):
                        with open(gif_path, "rb") as gif:
                            await bot.send_animation(chat_id=telegram_id, animation=gif, caption="üéâ –í–µ–ª–∏–∫–∏–π —É—Å–ø–µ—Ö!")

                    log_user(telegram_id)
                else:
                    await bot.send_message(chat_id=telegram_id, text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

    return {"ok": True}

