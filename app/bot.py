from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
import logging
import os
import httpx
import asyncio

TOKEN = "8162219271:AAEhKmeNRLzORbDwXyLKH4tbUMMmtU-ypsw"
CRYPTOBOT_LINK = "https://t.me/send?start=IVHvWARX9rfE"
FILE_PATH = "example.txt"
LOG_FILE = "paid_users.txt"
WALLET_ADDRESS = "TUsGgfP9X1QcxmuUjDYCFo89i3Wah6XsZQ"
recent_tx_ids = set()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def user_already_received(user_id):
    if not os.path.exists(LOG_FILE):
        return False
    with open(LOG_FILE, 'r') as f:
        return str(user_id) in f.read()

def log_user(user_id):
    with open(LOG_FILE, 'a') as f:
        f.write(f"{user_id}\n")

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥–∞—Ä–æ–≤–∞, –±–∞—Ä–±–æ—Å, –Ω—É —à–æ —Ç—ã —Ç–∞–º üòé")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/start\n/help\n/about\n/pay\n/check")

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("—Ç—É—Ç –º—ã –ø—Ä–æ–¥–∞–µ–º —Ñ–∞–π–Ω—ã–µ –≥–æ–≤—è–∂—å–∏ –∞–Ω—É—Å—ã, –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, 5 –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –±—É–º–∞–∂–µ–∫ –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º üòé")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∞", callback_data="pay")],
        [InlineKeyboardButton("üé® –í–¥–æ—Ö–Ω–æ–≤–∏ –º–µ–Ω—è", callback_data="inspire")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot ===
async def pay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 0.01 USDT (ERC-20)", url=CRYPTOBOT_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 0.01 USDT —á–µ—Ä–µ–∑ CryptoBot. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=reply_markup
    )

# === –ö–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "about":
        await query.edit_message_text("–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—ë—Ç–∫–∏–º –∞–ø—Ç–µ–∫–∞—Ä–µ–º ü§ñ")
    elif query.data == "help":
        await query.edit_message_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n/start\n/help\n/about\n/menu\n/pay\n/check")
    elif query.data == "inspire":
        await query.edit_message_text("‚ú® –£ —Ç–µ–±—è nice cock & awesome balls!")
    elif query.data == "pay":
        await pay_command(update, context)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tronscan (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞) ===
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_amount = 0.01
    url = f"https://apilist.tronscanapi.com/api/transaction?address={WALLET_ADDRESS}&limit=10&start=0&sort=-timestamp"

    async with httpx.AsyncClient() as client:
        try:
            r = await client.get(url)
            data = r.json()

            for tx in data.get("data", []):
                if tx.get("tokenInfo", {}).get("tokenAbbr") == "USDT":
                    sender = tx["ownerAddress"]
                    amount = int(tx["quant"]) / (10 ** int(tx["tokenInfo"]["tokenDecimal"]))

                    if abs(amount - target_amount) < 0.001:
                        await update.message.reply_text(
                            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `{sender}`\n–°—É–º–º–∞: {amount:.2f} USDT",
                            parse_mode="Markdown"
                        )
                        return
                    else:
                        await update.message.reply_text(
                            f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ —Å—É–º–º—É {amount:.2f} USDT, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ {target_amount:.2f} USDT."
                        )
                        return
            await update.message.reply_text("‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")

# === –≠—Ö–æ –∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open("rickroll.mp4", "rb") as video:
        await update.message.reply_video(video, caption="üé∂ –ù–∏–∫–æ–≥–¥–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—É...")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üòÖ")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("pay", pay_command))
    app.add_handler(CommandHandler("check", check))

    app.add_handler(CallbackQueryHandler(button_handler))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    print("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω. –ñ–º–∏ /menu –∏–ª–∏ /pay –≤ Telegram")
    app.run_polling()